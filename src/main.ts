const targetMailLabel = "GPT/willCheck"
const alreadyCheckedLabel = "GPT/didCheck"

const systemContent = `
あなたは予約メールを解析してJSON形式で返すアシスタントです。
JSONのフォーマットは下記を参考にしてください。

例1
{
    "title": "[映画]トイ・ストーリー", 
    "startDate":"2024-03-31T10:30:00",
    "endDate":"2024-03-31T11:30:00",
    "location":"TOHOシネマズ六本木ヒルズ",
    "reservationNumber": "1234",
    "seatNumber":"G-10"
}

例2
{
    "title": "[歯医者]歯科診療", 
    "startDate":"2024-03-31T10:30:00",
    "endDate":"2024-03-31T11:30:00",
    "location":"佐藤クリニック"
}

下記の場合は {"title":null} だけを返してください
- メールの中に予約などの文言が含まれないメールの場合
- startDateが分からない場合
- 明らかに広告や宣伝などのメールの場合

locationが不明の場合は ""を設定してください。
例に無いkeyは追加しないでください。
startDateのみが分かる場合は、endDateは1時間後の時間を設定してください。
メール1件に対して、最大1つの予定を返してください。配列では返さないでください。
メールの送信日時をstartDateとして扱わないように気をつけてください。
`;

function main() {
    const threads = getLabeledEmailThreads(targetMailLabel, 5);

    console.log("gpt-model:" , GPTModel );

    threads.forEach((thread) => {
        thread.removeLabel(GmailApp.getUserLabelByName(targetMailLabel));
        thread.addLabel(GmailApp.getUserLabelByName(alreadyCheckedLabel));

        const messages = thread.getMessages();
        const mail = messages[messages.length - 1];

        const body = mail.getPlainBody();
        console.log(["メール", mail.getSubject(), thread.getPermalink()].join("\n"));

        const resultString = askToChatGPT(
            systemContent,
            body.substring(0, 1000)
        );

        console.log(["GPT response:", resultString].join("\n"));
        if (resultString == null) {
            return;
        }
        const result = JSON.parse(resultString);

        if (result == null || 
            result.startDate == null || 
            result.endDate == null ||
            result.title == null
        ) {
            return;
        }

        // descriptionを動的に生成
        const descriptionParts: string[] = [];

        if (result.reservationNumber) {
            descriptionParts.push(`【予約番号】: ${result.reservationNumber}`);
        }

        if (result.seatNumber) {
            descriptionParts.push(`【座席番号】: ${result.seatNumber}`);
        }

        descriptionParts.push(`【リンク】　: ${getChromePermalink(thread)}`);
        descriptionParts.push(`\n=============\n`);
        descriptionParts.push(`【タイトル】: ${mail.getSubject()}`)
        descriptionParts.push(`${body.substring(0, 1000)}`);
        descriptionParts.push(`\nGenerated by Gmail-To-Calendar with GPT`);

        const description = descriptionParts.join("\n");

        CalendarApp.createEvent(
            result.title,
            new Date(result.startDate),
            new Date(result.endDate),
            { location: result.location, description: description }
        ).setColor(CalendarApp.EventColor.GRAY);
    });
}
